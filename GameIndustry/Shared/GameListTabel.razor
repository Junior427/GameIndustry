<div class="row mb-3">
    <div class="col">
        <select class="btn btn-toolbar border dropdown-toggle" @onchange=ChangeTableStyle>
            <option selected value="">Choose Table Stylr</option>
            @foreach (var item in AppStyles.TableStyle)
            {
                <option value="@item.Value">@item.Text</option>
            }
        </select>
    </div>
</div>
<div class="table-responsive">
    <table class="table @currentTableStyle">
        <thead class="thead-light">
            <tr>
                <th>Name</th>
                <th>Genre</th>
                <th>Release Date</th>
                <th<input type="checkbox" @bind="displayButtons"/></th>
            </tr>
        </thead>
        <tbody>
            <GenericList ListOfItems="Games">
                <ItemTemplate Context="game" >
                    <IndividualGame Game="game" IsTable=true DisplayButtons=displayButtons DeleteGame="DeleteTheGame" />
                </ItemTemplate>
            </GenericList>
            <Confirmation @ref="confirmation" onCancel="OnCancel" onConfirm="OnConfirm">
                <div class="text-danger">Do you wish to deleteт @gameToBeDeleted.Name ?</div>
            </Confirmation>
        </tbody>
    </table>
</div>

@code {
    [CascadingParameter]
    public AppStyles AppStyles{ get; set; }
    [Parameter] public List<Game> Games { get; set; } = new List<Game>();

    public bool displayButtons { get; set; } = true;
    string currentTableStyle = "table-striped";

    void DeleteTheGame(Game game)
    {
        gameToBeDeleted = game;
        confirmation.Show();
    }
    /*************************************************************/
    protected override void OnInitialized()
    { // инициализации компонента, перед отрисовки компонената
        Console.WriteLine($"1.OnInitializedAsync(). Games.Count:{Games?.Count}");
    }

    protected override void OnParametersSet()
    { // после метода OnInitialized, и/или при изменении Параметров
        Console.WriteLine($"2.OnParametersSet(). Games.Count:{Games?.Count}");
    }

    protected override void OnAfterRender(bool firstRender)
    { // после отрисовки компонента
        Console.WriteLine($"3.OnAfterRender(). First render ? {firstRender}");
    }

    protected override bool ShouldRender()
    {
        return true;
    }
    //return false; //запретить перересовывать компонент
    // public void DoSomething()
    // {
    //     // SomeLogic
    // }
    Confirmation confirmation;
    Game gameToBeDeleted;
    void OnConfirm()
    {
        Games.Remove(gameToBeDeleted);
        confirmation.Hide();
        gameToBeDeleted = null;
    }
    void OnCancel()
    {
        confirmation.Hide();
        gameToBeDeleted = null;
    }
    void ChangeTableStyle(ChangeEventArgs currentItem)
    {
        currentTableStyle = currentItem.Value.ToString();
    }
}
